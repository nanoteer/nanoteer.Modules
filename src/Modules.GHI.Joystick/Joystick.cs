using Nanoteer.Core;
using Nanoteer.Core.Gpio;

namespace Nanoteer.Modules.GHI
{
    // -- CHANGE FOR MICRO FRAMEWORK 4.2 --
    // If you want to use Serial, SPI, or DaisyLink (which includes GTI.SoftwareI2CBus), you must do a few more steps
    // since these have been moved to separate assemblies for NETMF 4.2 (to reduce the minimum memory footprint of Gadgeteer)
    // 1) add a reference to the assembly (named Gadgeteer.[interfacename])
    // 2) in GadgeteerHardware.xml, uncomment the lines under <Assemblies> so that end user apps using this module also add a reference.

    /// <summary>
    /// A simple joystick module with button for .NET Gadgeteer.
    /// </summary>
    public class Joystick
    {
        private AnalogInput inputX;
        private AnalogInput inputY;
        private InterruptInput input;
        private double offsetX;
        private double offsetY;
        private readonly object objLock = new object();

        // Note: A constructor summary is auto-generated by the doc builder.
        /// <summary></summary>
        /// <param name="socketNumber">The mainboard socket that has the module plugged into it.</param>
        public Joystick(int socketNumber)
        {
            Socket socket = Socket.AttachToSocket(socketNumber, SocketType.A);
            inputX = new AnalogInput(socket, 1);
            inputY = new AnalogInput(socket, 2);
            input = new InterruptInput(socket, socket.SocketPins[(int)SocketPin.Three]);
            input.Interrupt += OnInterrupt;
            offsetX = 0;
            offsetY = 0;
        }

        private void OnInterrupt(InterruptInput input, bool value)
        {
            JoystickState joystickState = value ? JoystickState.Released : JoystickState.Pressed;

            OnJoystickEvent(this, joystickState);
        }

        /// <summary>
        /// Gets a value that indicates whether the state of this Joystick is Pressed.
        /// </summary>
        public bool IsPressed => !input.Read();

        /// <summary>
        /// Represents the state of the <see cref="Joystick"/> object.
        /// </summary>
        public enum JoystickState
        {
            /// <summary>
            /// The state of Joystick is Pressed.
            /// </summary>
            Pressed = 0,
            /// <summary>
            /// The state of Joystick is Released.
            /// </summary>
            Released = 1
        }

        /// <summary>
        /// Represents the delegate that is used to handle the <see cref="JoystickStateChanged"/> events.
        /// </summary>
        /// <param name="sender">The <see cref="Joystick"/> object that raised the event.</param>
        /// <param name="state">The state of the Joystick.</param>
        public delegate void JoystickEventHandler(Joystick sender, JoystickState state);

        /// <summary>
        /// Raised when the state of <see cref="Joystick"/> is Pressed.
        /// </summary>
        /// <remarks>
        /// Implement this event handler
        /// when you want to provide an action associated with Joystick activity.
        /// Since the state of the Joystick is passed to the <see cref="JoystickEventHandler"/> delegate,
        /// you can use the same event handler for both Joystick states.
        /// </remarks>
        public event JoystickEventHandler JoystickStateChanged
        {
            add
            {
                lock (objLock)
                {
                    onJoystick += value;
                }
            }
            remove
            {
                lock (objLock)
                {
                    onJoystick -= value;
                }
            }
        }

        private JoystickEventHandler onJoystick;

        /// <summary>
        /// Raises the <see cref="JoystickButtonStateChanged"/> event.
        /// </summary>
        /// <param name="sender">The <see cref="Joystick"/> that raised the event.</param>
        /// <param name="JoystickState">The state of the Joystick.</param>
        protected virtual void OnJoystickEvent(Joystick sender, JoystickState JoystickState)
        {
            onJoystick?.Invoke(sender, JoystickState);
        }

        /// <summary>
        /// Gets the joystick position.
        /// </summary>
        /// <returns></returns>
        public Position GetPosition()
        {
            double x = Read(inputX);
            double y = Read(inputY);

            Position pos = new Position()
            {
                X = x * 2 - 1 - offsetX,
                Y = (1 - y) * 2 - 1 - offsetY
            };

            return pos;
        }

        /// <summary>
        /// Calibrates the joystick such that the current position is interpreted as 0.
        /// </summary>
        public void Calibrate()
        {
            offsetX = Read(inputX) * 2 - 1;
            offsetY = (1 - Read(inputY)) * 2 - 1;
        }

        /// <summary>
        /// Structure that contains the X and Y position of the joystick from -1.0 to 1.0 (0.0 means centered).
        /// </summary>
        public struct Position
        {
            /// <summary>
            /// The X coordinate of the joystick from -1.0 to 1.0 (0.0 means centered).
            /// </summary>
            public double X;

            /// <summary>
            /// The Y coordinate of the joystick from -1.0 to 1.0 (0.0 means centered).
            /// </summary>
            public double Y;

            public override string ToString()
            {
                return $"X: {X} - Y: {Y}";
            }
        }

        private double Read(AnalogInput input)
        {
            double total = 0;

            for (int i = 0; i < 10; i++)
                total += input.ReadRatio();

            return total / 10;
        }
    }
}