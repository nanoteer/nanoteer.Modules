using Nanoteer.Core;
using Nanoteer.Core.Gpio;

namespace Nanoteer.Modules.GHI
{
    public class MotionSensor
    {
        private readonly InterruptInput motionDetect;

        // Note: A constructor summary is auto-generated by the doc builder.
        /// <summary></summary>
        /// <param name="socketNumber">The socket that this module is plugged in to.</param>
        public MotionSensor(int socketNumber)
        {
            // This finds the Socket instance from the user-specified socket number.  
            // This will generate user-friendly error messages if the socket is invalid.
            // If there is more than one socket on this module, then instead of "null" for the last parameter, 
            // put text that identifies the socket to the user (e.g. "S" if there is a socket type S)
            Socket socket = Socket.AttachToSocket(socketNumber, SocketType.X);

            // This creates an InterruptInput instance.
            // This also generates user-friendly error messages automatically, e.g. if the user chooses a socket incompatible with an interrupt input.
            motionDetect = new InterruptInput(socket, socket.SocketPins[(int)SocketPin.Three]);

            // This registers a handler for the interrupt event of the interrupt input (which is below)
            motionDetect.Interrupt += InputInterrupt;
        }

        private void InputInterrupt(InterruptInput interrupt, bool state)
        {
            OnMotion_SensorEvent(this, state ? MotionSensorState.Ready : MotionSensorState.Busy);
        }

        /// <summary>
        /// Gets a value that indicates whether the sensor is still high after detecthing motion.
        /// </summary>
        public bool SensorStillActive => motionDetect.Read();

        /// <summary>
        /// Represents the state of the <see cref="Motion_Sensor"/> object.
        /// </summary>
        public enum MotionSensorState
        {
            /// <summary>
            /// The state of the sensor is low, which means it is now ready to begin detecting motion again.
            /// </summary>
            Ready = 0,
            /// <summary>
            /// The state of the sensor is high, which means it is not ready to begin detecting motion again.
            /// </summary>
            Busy = 1
        }

        /// <summary>
        /// Represents the delegate that is used to handle the <see cref="Motion_Sensed"/> event.
        /// </summary>
        /// <param name="sender">The <see cref="Motion_Sensor"/> object that raised the event.</param>
        /// <param name="state">The state of the Motion_Sensor</param>
        public delegate void Motion_SensorEventHandler(MotionSensor sender, MotionSensorState state);

        /// <summary>
        /// Raised when the state of <see cref="Motion_Sensor"/> is high.
        /// </summary>
        /// <remarks>
        /// Implement this event handler when you want to provide an action associated with Motion_Sensor activity.
        /// The state of the Motion_Sensor is passed to the <see cref="Motion_SensorEventHandler"/> delegate,
        /// so you can use the same event handler for both Motion_Sensor states.
        /// </remarks>
        public event Motion_SensorEventHandler Motion_Sensed;

        private Motion_SensorEventHandler onMotion_Sensor;

        /// <summary>
        /// Raises the <see cref="Motion_Sensed"/> event.
        /// </summary>
        /// <param name="sender">The <see cref="Motion_Sensor"/> that raised the event.</param>
        /// <param name="Motion_SensorState">The state of the Motion_Sensor.</param>
        protected virtual void OnMotion_SensorEvent(MotionSensor sender, MotionSensorState Motion_SensorState)
        {
            onMotion_Sensor ??= new Motion_SensorEventHandler(OnMotion_SensorEvent);
        }
    }
}
